# end2end-icmp
#
# Ping a given Endpoint every second
# measure roudntrip time and generate summaries
# avg, min, max, lost  (<1Sek)
#
# 20181114 initial Version based on end2end-pathping and end2end-udp3478
#
# Pending
#	Report to PRTG or MQTT
#   Currently IPv$ DNS only
#
# System.Net.NetworkInformation  PingSend-Method
# https://docs.microsoft.com/de-de/dotnet/api/system.net.networkinformation.ping.send?view=netframework-4.7.2
# System.Net.NetworkInformation  PingReply  Class
# https://docs.microsoft.com/de-de/dotnet/api/system.net.networkinformation.pingreply?view=netframework-4.7.2
#
#  IPStatus Enum
# https://docs.microsoft.com/de-de/dotnet/api/system.net.networkinformation.ipstatus
#
param (
	[string]$hostname = "13.107.8.2",  # samples  google = 8.8.8.8   SfBOnlineEdge = 13.107.8.2, outlook.office365.com
	[byte]$pingcount=15,  # total number of Ping to collect in one dataset
	[long]$pingtimeout = 20,  # ms timeout to wait for a reply. anything longer will be treated as loss
	[long]$buffersize = 160,   # PING Buffersize
	[string]$csvfilename = ".\end2end-icmp.csv"
)

set-psdebug -strict

Write-Host "End2End-ICMP: Start"
 
Write-Host "Check IP-Address"
$remoteip = $null
if ($hostname -as [ipaddress]) {
	write-host "IP-Address ok"
	$remoteip = $hostname
}
else {
	Write-Host "Try to resolve $($hostname) to IP-Address"
	$error.clear()
	$remoteip = ((resolve-dnsname $hostname -type A -ErrorAction SilentlyContinue)|?{$_.ipaddress})[0].ipaddress
}
if (!$error) {
	Write-Host "End2End-Ping:Initialize ICMP Object"
	$ping = new-object System.Net.NetworkInformation.Ping
	 
	Write-Host "End2End-Ping:Initialize ICMP Buffer with Size:"$buffersize
	$asciiencoder = [system.Text.Encoding]::ASCII
	$buffer = $asciiencoder.GetBytes([string]("www.msxfaq.de End2End-ICMP").padright(($buffersize),"x")) 

	Write-Host "End2End-Ping:Initialize CSV-File"$csvfilename
	if ((get-item $csvfilename).length -eq 0){
		Write-Host "End2End-Ping:Adding CSV-Header"
		"Timestamp,RemoteIP,Min,Avg,Max,Total,Lost,statuspacketloss,statusavg2min,statusmax2avg" | out-file $csvfilename -append
	}

	Write-Host "Initialize Result Property"
	$result = New-Object PSObject -Property @{
			timestamp = get-date -Format yyyyMMddhhmmss
			RemoteIP = [string]$($remoteip)
			Max = [long]0
			Min = [long]9999999
			Avg = [long]0
			Total = [long]0
			Lost = [long]0
			statuspacketloss=0
			statusavg2min=0
			statusmax2avg=0
	}
		  
	Write-Host "Start Endless ICMP Ping to $($remoteip) - press CTRL-C to Stop"
	Write-host  "Info:  .=Succesful   D=Duration  T=TTL  U=Unreachable  S=Size ?=Unknown  "
	[long]$Avgsum = 0
	while ($true) {
		$result.total++
		# ping remote host
		$pingresult= $ping.send($remoteip,$pingtimeout,$buffer)
		
		switch ($pingresult.Status.tostring())		{
			"Success" {
				Write-Host "." -nonewline
				if ($pingresult.roundtriptime -le $result.min) {$result.min = $pingresult.roundtriptime}
				if ($pingresult.roundtriptime -ge $result.max) {$result.max = $pingresult.roundtriptime}
				$Avgsum+=$pingresult.roundtriptime
			}
			"TimedOut" {
				Write-Host "D" -nonewline
				$result.lost++
			}
			"TtlExpired" {
				Write-Host "T" -nonewline
				$result.lost++
			}
			"DestinationPortUnreachable" {
				Write-Host "U" -nonewline
				$result.lost++
			}
			"PacketTooBig" {
				Write-Host "S" -nonewline
				$result.lost++
			}
			default {
				Write-Host "?" -nonewline
				Write-Host $pingresult.Status 
				$result.lost++
			}
		}

		if ($result.total -ge $pingcount){
			# calculating Average
			$result.avg = [long]($Avgsum/$result.total)
			[long]$Avgsum = 0
			
			if (($result.lost*10) -gt $result.total) {
				write-warning "PacketLoss > 10%"
				$result.statuspacketloss="1"
			}

			if (($result.avg) -gt ($result.min*10)) {
				write-warning "Avg 10 Times higher than Min"
				$result.statusavg2min="1"
			}
			if (($result.max) -gt ($result.avg*10)) {
				write-warning "Max 10 Times higher than Avg"
				$result.statusmax2avg="1"
			}
			Write-Host "$($result.timestamp) RemoteIP=$($result.remoteip) Min=$($result.min) Avg=$($result.avg) Max=$($result.max) Total=$($result.total) Lost=$($result.lost) Status=$($result.statuspacketloss),$($result.statusavg2min),$($result.statusmax2avg)"
			#$csvfile.Writeline("$($result.timestamp),$($result.RemoteIP),$($result.max),$($result.min),$($result.avg/$result.total),$($result.total),$($result.lost),$($result.statuspacketloss),$($result.statusavg2min),$($result.statusmax2avg)")
			"$($result.timestamp),$($result.RemoteIP),$($result.min),$($result.avg),$($result.max),$($result.total),$($result.lost),$($result.statuspacketloss),$($result.statusavg2min),$($result.statusmax2avg)" | out-file $csvfilename -append
			
			#$result
			$result.timestamp = get-date -Format yyyyMMddhhmmss
			$result.RemoteIP = $($remoteip)
			$result.Max=0
			$result.Min=9999999
			$result.Avg = 0
			$result.Total = 0
			$result.Lost = 0
			$result.statuspacketloss=0
			$result.statusavg2min=0
			$result.statusmax2avg=0
		}
		
		# Wait for next second
		$waittime = 1000 - (get-date).millisecond
		if ($waittime -ge 0) {
			start-sleep -milliseconds $waittime 
		}
	}
}
else {
	Write-warning "End2End-ICMP: Stop - no IP-Address found"
}
Write-Host "End2End-ICMP: End"